// üåê HTTP –ó–∞–ø—Ä–æ—Å—ã –≤ React - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

// ==========================================
// üì° 1. FETCH API - –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
// ==========================================

// GET –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
const fetchDocuments = async (page = 1, limit = 10) => {
  const params = new URLSearchParams({
    page: page.toString(),
    limit: limit.toString(),
    sort: 'created_at',
    order: 'desc'
  })

  try {
    const response = await fetch(`/api/documents?${params}`)
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }
    
    return await response.json()
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error)
    throw error
  }
}

// POST –∑–∞–ø—Ä–æ—Å —Å JSON –¥–∞–Ω–Ω—ã–º–∏
const createDocument = async (documentData) => {
  try {
    const response = await fetch('/api/documents', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify(documentData)
    })

    if (!response.ok) {
      const errorData = await response.json()
      throw new Error(errorData.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞')
    }

    return await response.json()
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error)
    throw error
  }
}

// PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const updateDocument = async (id, updates) => {
  try {
    const response = await fetch(`/api/documents/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify(updates)
    })

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${response.status}`)
    }

    return await response.json()
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error)
    throw error
  }
}

// DELETE –∑–∞–ø—Ä–æ—Å
const deleteDocument = async (id) => {
  try {
    const response = await fetch(`/api/documents/${id}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      }
    })

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${response.status}`)
    }

    return response.status === 204 // No Content
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error)
    throw error
  }
}

// ==========================================
// üì¶ 2. AXIOS - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
// ==========================================

import axios from 'axios'

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ axios —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const apiClient = axios.create({
  baseURL: 'http://localhost:8000/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json'
  }
})

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (interceptors)
apiClient.interceptors.request.use(
  (config) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    const token = localStorage.getItem('token')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', config)
    return config
  },
  (error) => Promise.reject(error)
)

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
apiClient.interceptors.response.use(
  (response) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response)
    return response
  },
  (error) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (error.response?.status === 401) {
      localStorage.removeItem('token')
      window.location.href = '/login'
    }
    
    console.error('–û—à–∏–±–∫–∞ API:', error)
    return Promise.reject(error)
  }
)

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ axios
const axiosExamples = {
  // GET –∑–∞–ø—Ä–æ—Å
  getDocuments: async () => {
    const response = await apiClient.get('/documents')
    return response.data
  },

  // POST –∑–∞–ø—Ä–æ—Å
  createDocument: async (data) => {
    const response = await apiClient.post('/documents', data)
    return response.data
  },

  // PUT –∑–∞–ø—Ä–æ—Å
  updateDocument: async (id, data) => {
    const response = await apiClient.put(`/documents/${id}`, data)
    return response.data
  },

  // DELETE –∑–∞–ø—Ä–æ—Å
  deleteDocument: async (id) => {
    await apiClient.delete(`/documents/${id}`)
  },

  // –ó–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  searchDocuments: async (query, filters = {}) => {
    const response = await apiClient.get('/documents/search', {
      params: { query, ...filters }
    })
    return response.data
  },

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
  uploadFile: async (file, onProgress) => {
    const formData = new FormData()
    formData.append('file', file)

    const response = await apiClient.post('/documents/upload', formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      },
      onUploadProgress: (progressEvent) => {
        const percentCompleted = Math.round(
          (progressEvent.loaded * 100) / progressEvent.total
        )
        onProgress?.(percentCompleted)
      }
    })
    return response.data
  }
}

// ==========================================
// üîß 3. React Hook –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
// ==========================================

import { useState, useEffect } from 'react'

// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è fetch –∑–∞–ø—Ä–æ—Å–æ–≤
export const useFetch = (url, options = {}) => {
  const [data, setData] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true)
      setError(null)

      try {
        const response = await fetch(url, {
          headers: {
            'Content-Type': 'application/json',
            ...options.headers
          },
          ...options
        })

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`)
        }

        const result = await response.json()
        setData(result)
      } catch (err) {
        setError(err.message)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [url])

  return { data, loading, error }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—É–∫–∞
const DocumentList = () => {
  const { data, loading, error } = useFetch('/api/documents')

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
  if (error) return <div>–û—à–∏–±–∫–∞: {error}</div>

  return (
    <div>
      {data?.map(doc => (
        <div key={doc.id}>{doc.name}</div>
      ))}
    </div>
  )
}

// ==========================================
// üéØ 4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è Findi
// ==========================================

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å backend –¥–ª—è –ø–æ–∏—Å–∫–∞
export const searchAPI = {
  // –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
  searchInDocument: async (documentId, query) => {
    const response = await fetch('/api/documents/search', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        document_id: documentId,
        query: query,
        options: {
          highlight: true,
          case_sensitive: false,
          max_results: 50
        }
      })
    })

    if (!response.ok) {
      throw new Error(`Search failed: ${response.status}`)
    }

    return await response.json()
  },

  // –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  analyzeDocument: async (file) => {
    const formData = new FormData()
    formData.append('document', file)
    formData.append('analysis_type', 'full')

    const response = await fetch('/api/documents/analyze', {
      method: 'POST',
      body: formData
    })

    if (!response.ok) {
      throw new Error(`Analysis failed: ${response.status}`)
    }

    return await response.json()
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  getMetadata: async (documentId) => {
    const response = await fetch(`/api/documents/${documentId}/metadata`)
    
    if (!response.ok) {
      throw new Error(`Failed to get metadata: ${response.status}`)
    }

    return await response.json()
  }
}

// ==========================================
// üõ†Ô∏è 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
// ==========================================

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º API –≤—ã–∑–æ–≤–∞
const DocumentSearchComponent = () => {
  const [searchQuery, setSearchQuery] = useState('')
  const [results, setResults] = useState([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  const handleSearch = async () => {
    if (!searchQuery.trim()) return

    setLoading(true)
    setError(null)

    try {
      const response = await searchAPI.searchInDocument(
        'document-id',
        searchQuery
      )
      
      setResults(response.results || [])
    } catch (err) {
      setError(err.message)
      setResults([])
    } finally {
      setLoading(false)
    }
  }

  return (
    <div>
      <input
        type="text"
        value={searchQuery}
        onChange={(e) => setSearchQuery(e.target.value)}
        placeholder="–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ..."
      />
      <button onClick={handleSearch} disabled={loading}>
        {loading ? '–ü–æ–∏—Å–∫...' : '–ù–∞–π—Ç–∏'}
      </button>

      {error && <div style={{color: 'red'}}>–û—à–∏–±–∫–∞: {error}</div>}
      
      <div>
        {results.map((result, index) => (
          <div key={index}>
            <p>{result.text}</p>
            <small>–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {(result.confidence * 100).toFixed(1)}%</small>
          </div>
        ))}
      </div>
    </div>
  )
}

// ==========================================
// üîÑ 6. –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
// ==========================================

// –§—É–Ω–∫—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
const fetchWithRetry = async (url, options = {}, maxRetries = 3) => {
  for (let i = 0; i <= maxRetries; i++) {
    try {
      const response = await fetch(url, options)
      
      if (response.ok) {
        return response
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (i === maxRetries) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)))
      
    } catch (error) {
      if (i === maxRetries) {
        throw error
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)))
    }
  }
}

// –ü—Ä–æ—Å—Ç–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const cache = new Map()

const fetchWithCache = async (url, options = {}) => {
  const cacheKey = url + JSON.stringify(options)
  
  if (cache.has(cacheKey)) {
    console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞:', cacheKey)
    return cache.get(cacheKey)
  }
  
  const response = await fetch(url, options)
  const data = await response.json()
  
  cache.set(cacheKey, data)
  
  // –û—á–∏—â–∞–µ–º –∫—ç—à —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
  setTimeout(() => {
    cache.delete(cacheKey)
  }, 5 * 60 * 1000)
  
  return data
}

// ==========================================
// üì± 7. Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
// ==========================================

// WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
const useWebSocket = (url) => {
  const [socket, setSocket] = useState(null)
  const [connected, setConnected] = useState(false)
  const [messages, setMessages] = useState([])

  useEffect(() => {
    const ws = new WebSocket(url)
    
    ws.onopen = () => {
      setConnected(true)
      setSocket(ws)
    }
    
    ws.onmessage = (event) => {
      const message = JSON.parse(event.data)
      setMessages(prev => [...prev, message])
    }
    
    ws.onclose = () => {
      setConnected(false)
      setSocket(null)
    }
    
    return () => {
      ws.close()
    }
  }, [url])

  const sendMessage = (message) => {
    if (socket && connected) {
      socket.send(JSON.stringify(message))
    }
  }

  return { connected, messages, sendMessage }
}

// ==========================================
// üèÅ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
// ==========================================

export {
  fetchDocuments,
  createDocument,
  updateDocument,
  deleteDocument,
  axiosExamples,
  DocumentList,
  DocumentSearchComponent,
  fetchWithRetry,
  fetchWithCache,
  useWebSocket
} 